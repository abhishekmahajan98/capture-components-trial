To send the request from the middleware to the backend, you'll need to make an HTTP request from your middleware to your backend endpoint. Here's how you can modify your middleware function to achieve this:



```python
from fastapi import APIRouter, Form, File, UploadFile, HTTPException
from typing import List
import httpx
import asyncio

router = APIRouter()

BACKEND_URL = "http://your-backend-url"  # Replace with your actual backend URL

@router.post('/middleware/{upn}')
async def submit_middleware(upn: str, form_data: str = Form(...), fileList: List[UploadFile] = File(...)):
    try:
        async with httpx.AsyncClient() as client:
            # Prepare the form data
            data = {"form_data": form_data}
            
            # Prepare the files
            files = [("fileList", (file.filename, file.file, file.content_type)) for file in fileList]
            
            # Add any additional headers you need
            headers = {"X-Custom-Header": "Some-Value"}
            
            # Make the request to the backend
            response = await client.post(
                f"{BACKEND_URL}/{upn}",
                data=data,
                files=files,
                headers=headers
            )
            
            # Return the response from the backend
            return response.json()
    except httpx.HTTPError as e:
        raise HTTPException(status_code=500, detail=f"Error forwarding request: {str(e)}")

```

Here's an explanation of the changes made:

1. We're using `httpx` library for making asynchronous HTTP requests. You'll need to install it with `pip install httpx`.

2. The middleware function is now asynchronous (`async def`) to allow for non-blocking HTTP requests.

3. We're using an `AsyncClient` from `httpx` to make the request to the backend.

4. The form data and files are prepared separately. The `form_data` is added to a dictionary, and the files are prepared as a list of tuples.

5. We're adding a custom header as an example. You can modify this as needed.

6. The request is made to the backend using the `post` method of the client, including the prepared data, files, and headers.

7. The response from the backend is returned as JSON.

8. Error handling is implemented to catch any HTTP errors and raise an HTTPException if something goes wrong.

Note that you'll need to replace `"http://your-backend-url"` with the actual URL of your backend service.

Also, notice that I changed the HTTP method from `GET` to `POST` for both the middleware and backend routes. This is because you're sending form data and files, which is typically done with a POST request.

Would you like me to explain any part of this code in more detail?