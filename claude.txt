This is a common issue when using client-side routing with a Single Page Application (SPA) served by a backend server. The problem occurs because when you reload a page on a specific route, the server tries to find a file that matches that route, which doesn't exist.

To solve this issue, you need to configure your FastAPI server to always serve the `index.html` file for any route that doesn't match a static file. This way, your React app can handle the routing on the client side.

Here's how you can modify your FastAPI setup to fix this:

1. First, create a custom middleware to serve `index.html` for unmatched routes:

```python
from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
import os

app = FastAPI()

# Mount your static files
app.mount("/assets", StaticFiles(directory="dist/assets"), name="assets")

@app.middleware("http")
async def serve_spa(request: Request, call_next):
    response = await call_next(request)
    if response.status_code == 404:
        return FileResponse('dist/index.html')
    return response

# Serve static files
@app.get("/{full_path:path}")
async def serve_static(full_path: str):
    file_path = os.path.join("dist", full_path)
    if os.path.exists(file_path):
        return FileResponse(file_path)
    return FileResponse('dist/index.html')
```

This setup does the following:

1. It mounts the `assets` directory (where Vite typically puts compiled assets) as a static directory.
2. It adds a middleware that catches 404 responses and serves `index.html` instead.
3. It adds a catch-all route that serves static files if they exist, or `index.html` if they don't.

With this configuration, when you reload a page on any route:
- If the route corresponds to a static asset (like a JS or CSS file), it will be served directly.
- If the route doesn't match any file, `index.html` will be served, allowing your React app to handle the routing.

Make sure your React app is using a router (like React Router) to handle client-side routing properly.

Also, ensure that your Vite configuration is set up to output the build to the `dist` directory. This is typically the default, but you can confirm it in your `vite.config.ts` file:

```typescript
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  build: {
    outDir: 'dist',
  },
})
```

After making these changes, rebuild your React app and restart your FastAPI server. You should now be able to reload pages on any route without getting 404 errors.

Would you like me to explain any part of this solution in more detail?